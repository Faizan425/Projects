import os
import asyncio
from flask import Flask
from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from boltiotai import openai

# Flask app
app = Flask(__name__)

# Load secrets from environment variables (Replit secrets)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPEN_API_KEY = os.getenv("OPENAI_API_KEY")

# Check if the environment variables are loaded
if not TELEGRAM_TOKEN or not OPEN_API_KEY:
    raise EnvironmentError("Please set TELEGRAM_TOKEN and OPEN_API_KEY in secrets.")

# Initialize OpenAI API
openai.api_key = OPEN_API_KEY

# Command handler for /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("Hello! I am your AI-powered chatbot. Ask me anything!")

# Message handler
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        user_message = update.message.text
        try:
            # Generate response using OpenAI
            response = openai.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": user_message},
                ],
            )
            bot_response = response["choices"][0]["message"]["content"]
        except Exception as e:
            bot_response = f"Error generating response: {e}"
        await update.message.reply_text(bot_response)

# Telegram bot application
async def run_bot():
    # Initialize the Telegram bot application
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # Add command and message handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Start the bot's lifecycle
    await application.initialize()  # Proper initialization of the Application object
    await application.start()       # Start the application (non-blocking)
    await application.updater.start_polling()  # Start polling for updates

    # Keep the bot running
    try:
        await asyncio.Future()  # Run forever
    finally:
        await application.updater.stop()  # Stop polling
        await application.stop()          # Stop the application
        await application.shutdown()      # Shutdown properly

# Flask route
@app.route("/", methods=["GET"])
def home():
    return "Telegram chatbot is running!"

# Start Flask app in a separate thread
def run_flask():
    app.run(host="0.0.0.0", port=8080)

if __name__ == "__main__":
    # Start Flask app in a background thread
    from threading import Thread

    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # Run the Telegram bot in the main thread
    asyncio.run(run_bot())
